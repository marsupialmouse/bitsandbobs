AWSTemplateFormatVersion: 2010-09-09
Description: Infrastructure for the Bits & Bobs application

Parameters:
  Environment:
    Type: String
    Default: Development
    Description: The environment for which the resources are being created
    AllowedValues:
      - Development
      - Staging
      - Production

  EnableCloudFrontLogging:
    Type: String
    Default: false
    Description: Whether CloudFront logging to S3 is enabled
    AllowedValues:
      - true
      - false

  CreateEksCluster:
    Type: String
    Default: false
    Description: Whether the EKS cluster should be created ($$)
    AllowedValues:
      - true
      - false

  EksLoadBalancerArn:
    Type: String
    Description: >
      The ARN of the load balancer created by EKS, for use by the CloudFront VPC Origin. Ideally we'd look this up
      inside the template, but the LB won't be created until we run helm to create the app inside Kubernetes, which
      takes place after this template is deployed.

  EksLoadBalancerDomainName:
    Type: String
    Description: |
      The domain name of the load balancer created by EKS. To get the ARN and domain name:

      DOMAINNAME=$(kubectl get ingress bitsandbobs -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
      ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?DNSName=='$DOMAINNAME'].LoadBalancerArn" --output text)

  AdminPrincipalArn:
    Type: String
    Default: ''
    Description: The ARN of the IAM role to grant admin access to the EKS cluster

Metadata:
  cfn-lint:
    config:
      ignore_checks:
        - W3002 # We do package the templates, so quit your whining

Mappings:
  EnvironmentMap:
    Development:
      Cidr: 10.16.0.0/20
    Staging:
      Cidr: 10.16.16.0/20
    Production:
      Cidr: 10.16.32.0/20

Conditions:
  CreateEksClusterCondition: !Equals [ !Ref CreateEksCluster, 'true' ]

Resources:
  VpcStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: vpc.yaml
      Parameters:
        Cidr: !FindInMap [EnvironmentMap, !Ref Environment, Cidr]
        CreateNatGateway: !Ref CreateEksCluster

  S3Stack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: storage.yaml
      Parameters:
        Environment: !Ref Environment

  DatabaseStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: database.yaml
      Parameters:
        Environment: !Ref Environment

  EksStack:
    Type: AWS::CloudFormation::Stack
    Condition: CreateEksClusterCondition
    Properties:
      TemplateURL: kubernetes.yaml
      Parameters:
        ClusterName: !Sub 'EksCluster-${Environment}'
        Subnet1Id: !GetAtt VpcStack.Outputs.SubnetKubernetesAId
        Subnet2Id: !GetAtt VpcStack.Outputs.SubnetKubernetesBId
        AppBucketArn: !GetAtt S3Stack.Outputs.AppBucketArn
        DynamoTableArn: !GetAtt DatabaseStack.Outputs.TableArn
        AdminPrincipalArn: !Ref AdminPrincipalArn

  CfStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: cdn.yaml
      Parameters:
        Environment: !Ref Environment
        AppBucketDomainName: !GetAtt S3Stack.Outputs.AppBucketDomainName
        EnableLogging: !Ref EnableCloudFrontLogging
        LoggingBucketDomainName: !GetAtt S3Stack.Outputs.LoggingBucketDomainName
        EksClusterArn: !If
          - CreateEksClusterCondition
          - !GetAtt EksStack.Outputs.EksClusterArn
          - ''
        EksLoadBalancerArn: !Ref EksLoadBalancerArn
        EksLoadBalancerDomainName: !Ref EksLoadBalancerDomainName
