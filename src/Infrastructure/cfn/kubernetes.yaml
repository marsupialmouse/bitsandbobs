---
AWSTemplateFormatVersion: 2010-09-09
Description: EKS cluster for the Bits & Bobs application

Parameters:
  ClusterName:
    Type: String
    Description: The name of the EKS cluster (for tagging)
  Subnet1Id:
    Type: String
    Description: The ID of the first subnet for EKS nodes
  Subnet2Id:
    Type: String
    Description: The ID of the second subnet for EKS nodes
  AppBucketArn:
    Type: String
    Description: The ARN of the S3 bucket for the client app
  DynamoTableArn:
    Type: String
    Description: The ARN of the DynamoDB table used by the application
  AdminPrincipalArn:
    Type: String
    Description: The ARN of the IAM role to grant admin access to the EKS cluster

Conditions:
  CreateAdminAccessEntry: !Not [!Equals [!Ref AdminPrincipalArn, '']]

Resources:
  EksCluster:
    # checkov:skip=CKV_AWS_58: This is a demo, we don't need to pay for KMS to encrypt out "secrets"
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.33'
      RoleArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AmazonEKSAutoClusterRole'
      AccessConfig:
        AuthenticationMode: API_AND_CONFIG_MAP
      ComputeConfig:
        Enabled: true
        NodePools: # We create a custom spot pool using Helm
          - system
          - general-purpose
        NodeRoleArn: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/AmazonEKSAutoNodeRole'
      KubernetesNetworkConfig:
        ElasticLoadBalancing:
          Enabled: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
      ResourcesVpcConfig:
        EndpointPrivateAccess: true
        EndpointPublicAccess: true
        SubnetIds:
          - !Ref Subnet1Id
          - !Ref Subnet2Id
      StorageConfig:
        BlockStorage:
          Enabled: true
      UpgradePolicy:
        SupportType: STANDARD
      ZonalShiftConfig:
        Enabled: false

  RolePodIdentity:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Sid: AllowEksAuthToAssumeRoleForPodIdentity
          Effect: Allow
          Principal:
            Service:
              - pods.eks.amazonaws.com
          Action:
            - sts:AssumeRole
            - sts:TagSession
      Policies:
        - PolicyName: EksNodePodIdentity
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: DynamoDBIndexAndStreamAccess
                Effect: Allow
                Action:
                  - dynamodb:GetShardIterator
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:ListStreams
                Resource:
                  - !Ref DynamoTableArn
                  - !Sub ${DynamoTableArn}/index/*
                  - !Sub ${DynamoTableArn}/stream/*
              - Sid: DynamoDBTableAccess
                Effect: Allow
                Action:
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:ConditionCheckItem
                  - dynamodb:PutItem
                  - dynamodb:DescribeTable
                  - dynamodb:DeleteItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:UpdateItem
                Resource:
                  - !Ref DynamoTableArn
              - Sid: DynamoDBDescribeLimitsAccess
                Effect: Allow
                Action:
                  - dynamodb:DescribeLimits
                Resource:
                  - !Ref DynamoTableArn
                  - !Sub ${DynamoTableArn}/index/*
              - Sid: DynamoDBListTablesAccess   # For health checks
                Effect: Allow
                Action:
                  - dynamodb:ListTables
                Resource: !Sub 'arn:${AWS::Partition}:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*'
              - Sid: SSMDataProtectionAccess
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - ssm:DeleteParameter
                  - ssm:DeleteParameters
                  - ssm:PutParameter
                Resource: !Sub 'arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/BitsAndBobs/*/DataProtection/*'
              - Sid: AuctionImageAccess
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:PutObject
                  - s3:GetObjectTagging
                  - s3:PutObjectTagging
                Resource:
                  - !Sub '${AppBucketArn}/auctionimages/*'
              - Sid: SqsAccess
                Effect: Allow
                Action:
                  - sqs:SetQueueAttributes
                  - sqs:ReceiveMessage
                  - sqs:CreateQueue
                  - sqs:DeleteMessage
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                  - sqs:PurgeQueue
                  - sqs:DeleteQueue
                  - sqs:TagQueue
                Resource: !Sub 'arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: SnsAccess
                Effect: Allow
                Action:
                  - sns:GetTopicAttributes
                  - sns:ListSubscriptionsByTopic
                  - sns:GetSubscriptionAttributes
                  - sns:SetSubscriptionAttributes
                  - sns:CreateTopic
                  - sns:Publish
                  - sns:Subscribe
                Resource: !Sub 'arn:${AWS::Partition}:sns:${AWS::Region}:${AWS::AccountId}:*'
              - Sid: SnsListAccess
                Effect: Allow
                Action:
                  - sns:ListTopics
                Resource: '*'

  EksPodIdentityAssociation:
    Type: AWS::EKS::PodIdentityAssociation
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      Namespace: default
      RoleArn: !GetAtt RolePodIdentity.Arn
      ServiceAccount: bitsandbobs

  AdminAccessEntry:
    Type: AWS::EKS::AccessEntry
    Condition: CreateAdminAccessEntry
    DependsOn: EksCluster
    Properties:
      ClusterName: !Ref ClusterName
      PrincipalArn: !Ref AdminPrincipalArn
      AccessPolicies:
        - PolicyArn: 'arn:aws:eks::aws:cluster-access-policy/AmazonEKSAdminPolicy'
          AccessScope:
            Type: 'cluster'
      Type: 'STANDARD'


Outputs:
  EksCluster:
    Value: !Ref EksCluster
  EksClusterArn:
    Value: !GetAtt EksCluster.Arn
  EksClusterEndpoint:
    Value: !GetAtt EksCluster.Endpoint

