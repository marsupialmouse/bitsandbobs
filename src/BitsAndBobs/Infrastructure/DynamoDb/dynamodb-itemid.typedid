    [global::System.ComponentModel.TypeConverter(typeof(PLACEHOLDERIDTypeConverter))]
    [global::System.Text.Json.Serialization.JsonConverter(typeof(PLACEHOLDERIDSystemTextJsonConverter))]
    [global::Newtonsoft.Json.JsonConverter(typeof(PLACEHOLDERIDNewtonsoftJsonConverter))]
    partial struct PLACEHOLDERID :
        global::System.ISpanFormattable,
        global::System.IParsable<PLACEHOLDERID>, global::System.ISpanParsable<PLACEHOLDERID>,
        global::System.IComparable<PLACEHOLDERID>, global::System.IEquatable<PLACEHOLDERID>, global::System.IFormattable
    {
        private PLACEHOLDERID(string value) => Value = value;

        public static readonly PLACEHOLDERID Empty = new PLACEHOLDERID(string.Empty);

        /// <summary>
        /// Gets the prefix used in the full ID. Should end with a hash (#).
        /// </summary>
        private static partial string Prefix { get; }

        /// <summary>
        /// Gets a non-prefixed version of the ID suitable for use in URLs or other user-facing contexts.
        /// </summary>
        public string FriendlyValue => Value[Prefix.Length..];

        /// <summary>
        /// Gets the full version of the ID for use in DynamoDB or other internal contexts.
        /// </summary>
        public string Value { get; }

        /// <summary>
        /// Creates a new ID.
        /// </summary>
        public static PLACEHOLDERID Create() => new PLACEHOLDERID($"{Prefix}{Guid.NewGuid():n}");

        /// <inheritdoc cref="global::System.IEquatable{T}"/>
        public bool Equals(PLACEHOLDERID other)
            => (Value, other.Value) switch
            {
                (null, null) => true,
                (null, _) => false,
                (_, null) => false,
                (_, _) => Value.Equals(other.Value, global::System.StringComparison.Ordinal),
            };

        public override bool Equals(object? obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            return obj is PLACEHOLDERID other && Equals(other);
        }

        public override int GetHashCode() => Value.GetHashCode();

        public override string ToString() => Value;

        public static bool operator ==(PLACEHOLDERID a, PLACEHOLDERID b) => a.Equals(b);
        public static bool operator !=(PLACEHOLDERID a, PLACEHOLDERID b) => !(a == b);

        /// <inheritdoc cref="global::System.IComparable{TSelf}"/>
        public int CompareTo(PLACEHOLDERID other)
            => (Value, other.Value) switch
            {
                (null, null) => 0,
                (null, _) => -1,
                (_, null) => 1,
                (_, _) => string.CompareOrdinal(Value, other.Value),
            };

        public partial class PLACEHOLDERIDTypeConverter : global::System.ComponentModel.TypeConverter
        {
            public override bool CanConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type sourceType)
            {
                return sourceType == typeof(string) || base.CanConvertFrom(context, sourceType);
            }

            public override object? ConvertFrom(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object value)
            {
                if (value is string stringValue)
                {
                    return PLACEHOLDERID.Parse(stringValue);
                }

                return base.ConvertFrom(context, culture, value);
            }

            public override bool CanConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Type? sourceType)
            {
                return sourceType == typeof(string) || base.CanConvertTo(context, sourceType);
            }

            public override object? ConvertTo(global::System.ComponentModel.ITypeDescriptorContext? context, global::System.Globalization.CultureInfo? culture, object? value, global::System.Type destinationType)
            {
                if (value is PLACEHOLDERID idValue)
                {
                    if (destinationType == typeof(string))
                    {
                        return idValue.Value;
                    }
                }

                return base.ConvertTo(context, culture, value, destinationType);
            }
        }

        public partial class PLACEHOLDERIDSystemTextJsonConverter : global::System.Text.Json.Serialization.JsonConverter<PLACEHOLDERID>
        {
            public override PLACEHOLDERID Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                => new (reader.GetString()!);

            public override void Write(global::System.Text.Json.Utf8JsonWriter writer, PLACEHOLDERID value, global::System.Text.Json.JsonSerializerOptions options)
                => writer.WriteStringValue(value.Value);

            public override PLACEHOLDERID ReadAsPropertyName(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
                => new(reader.GetString() ?? throw new global::System.FormatException("The string for the PLACEHOLDERID property was null"));

            public override void WriteAsPropertyName(global::System.Text.Json.Utf8JsonWriter writer, PLACEHOLDERID value, global::System.Text.Json.JsonSerializerOptions options)
                => writer.WritePropertyName(value.Value);
        }

        public static PLACEHOLDERID Parse(string input)
        {
            if (string.IsNullOrEmpty(input))
                throw new global::System.ArgumentException("ID cannot be null or empty", nameof(input));

            if (input.StartsWith(Prefix, global::System.StringComparison.Ordinal))
            {
                if (input.Length != Prefix.Length + 32)
                    throw new global::System.ArgumentException($"A prefixed ID must be {Prefix.Length + 32} characters long", nameof(input));

                return new PLACEHOLDERID(input);
            }

            if (input.Length != 32)
                throw new global::System.ArgumentException("A friendly ID must be 32 characters long", nameof(input));

            return new PLACEHOLDERID($"{Prefix}{input}");
        }

        public static bool TryParse(
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? input,
            out PLACEHOLDERID result)
        {
            if (string.IsNullOrEmpty(input))
            {
                result = default;
                return false;
            }

            if (input.StartsWith(Prefix, global::System.StringComparison.Ordinal))
            {
                if (input.Length != Prefix.Length + 32)
                {
                    result = default;
                    return false;
                }

                result = new PLACEHOLDERID(input);
                return true;
            }

            if (input.Length != 32)
            {
                result = default;
                return false;
            }

            result = new PLACEHOLDERID($"{Prefix}{input}");
            return true;
        }

        /// <inheritdoc cref="global::System.IParsable{TSelf}"/>
        public static PLACEHOLDERID Parse(string input, global::System.IFormatProvider? provider)
            => Parse(input);

        /// <inheritdoc cref="global::System.IParsable{TSelf}"/>
        public static bool TryParse(
            [global::System.Diagnostics.CodeAnalysis.NotNullWhen(true)] string? input,
            global::System.IFormatProvider? provider,
            out PLACEHOLDERID result) => TryParse(input, out result);


        /// <inheritdoc cref="global::System.IFormattable"/>
        public string ToString(string? format, global::System.IFormatProvider? formatProvider)
            => Value;

        public static PLACEHOLDERID Parse(global::System.ReadOnlySpan<char> input)
            => Parse(input.ToString());

        /// <inheritdoc cref="global::System.ISpanParsable{TSelf}"/>
        public static PLACEHOLDERID Parse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider? provider)
            => Parse(input.ToString());

        /// <inheritdoc cref="global::System.ISpanParsable{TSelf}"/>
        public static bool TryParse(global::System.ReadOnlySpan<char> input, global::System.IFormatProvider? provider, out PLACEHOLDERID result)
        {
            return TryParse(input.ToString(), provider, out result);
        }

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            global::System.ReadOnlySpan<char> format,
            global::System.IFormatProvider? provider)
            => TryFormat(destination, out charsWritten, format);

        /// <inheritdoc cref="global::System.ISpanFormattable"/>
        public bool TryFormat(
            global::System.Span<char> destination,
            out int charsWritten,
            global::System.ReadOnlySpan<char> format = default)
        {
            if (destination.Length > Value.Length)
            {
                global::System.MemoryExtensions.AsSpan(Value).CopyTo(destination);
                charsWritten = Value.Length;
                return true;
            }

            charsWritten = default;
            return false;
        }

        public class DynamoConverter : Amazon.DynamoDBv2.DataModel.IPropertyConverter
        {
            public Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry ToEntry(object value)
            {
                if (value is not PLACEHOLDERID idValue)
                    throw new ArgumentException($"Value must be of type {nameof(PLACEHOLDERID)}", nameof(value));

                if (idValue  == PLACEHOLDERID.Empty)
                    throw new ArgumentException("ID value cannot be empty", nameof(value));

                return new Amazon.DynamoDBv2.DocumentModel.Primitive(idValue.Value, false);
            }

            public object FromEntry(Amazon.DynamoDBv2.DocumentModel.DynamoDBEntry entry)
            {
                var stringValue = entry.AsString();

                if (!string.IsNullOrEmpty(stringValue)
                    && PLACEHOLDERID.TryParse(stringValue, null, out var value))
                {
                    return value;
                }

                throw new ArgumentException($"Serialized value is not a valid {nameof(PLACEHOLDERID)}", nameof(entry));
            }
        }

        public partial class PLACEHOLDERIDNewtonsoftJsonConverter : global::Newtonsoft.Json.JsonConverter
        {
            public override bool CanConvert(global::System.Type objectType)
            {
                return objectType == typeof(PLACEHOLDERID);
            }

            public override void WriteJson(global::Newtonsoft.Json.JsonWriter writer, object? value, global::Newtonsoft.Json.JsonSerializer serializer)
            {
                serializer.Serialize(writer, value is PLACEHOLDERID id ? id.FriendlyValue : null);
            }

            public override object? ReadJson(global::Newtonsoft.Json.JsonReader reader, global::System.Type objectType, object? existingValue, global::Newtonsoft.Json.JsonSerializer serializer)
            {
                if (objectType == typeof(PLACEHOLDERID?))
                {
                    var value = serializer.Deserialize<string?>(reader);

                    return value is null ? null : PLACEHOLDERID.Parse(value);
                }

                return PLACEHOLDERID.Parse(serializer.Deserialize<string>(reader)!);
            }
        }
    }
