name: Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to which the application will be deployed.
        default: 'Production'
        type: environment
        required: true
      version:
        description: The version (tag) to deploy. Leave blank to build and deploy a new version.
        type: string
        required: false
      enableEksCluster:
        description: Whether the EKS cluster should be enabled ($$)
        type: boolean
        default: false
        required: true

env:
  CfnBucket: ${{ vars.S3_BUCKET_CFN }}
  DeployCfnRole: ${{ secrets.AWS_ROLE_DEPLOY_CFN_ARN }}
  DeployAssetsRole: ${{ secrets.AWS_ROLE_DEPLOY_ASSSETS_ARN }}
  DeployVersionRole: ${{ secrets.AWS_ROLE_DEPLOY_VERSION_ARN }}
  Region: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  createVersion:
    name: Create release version
    runs-on: ubuntu-latest
    if: ${{ !startsWith(inputs.version, 'v') }}
    outputs:
      version: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for calculating the latest version
      - name: Increment version
        id: version
        uses: paulhatch/semantic-version@v5.4.0

  deployUI:
    name: Build and publish UI
    runs-on: ubuntu-latest
    needs: createVersion
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ needs.createVersion.outputs.version }}
      uiBucket: ${{ vars.S3_BUCKET_APP }}
    defaults:
      run:
        working-directory: 'src/BitsAndBobs/clientapp'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: src/BitsAndBobs/clientapp/yarn.lock
      - name: Install Node.js dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Build
        run: yarn build
      - name: Configure AWS Delivery Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Sync build to UI bucket
        run: aws s3 sync ./dist s3://${{ env.uiBucket }}/${{ env.version }}

  deployApi:
    name: Build and publish API
    runs-on: ubuntu-latest
    needs: [createVersion]
    environment: ${{ inputs.environment }}
    env:
      tag: ${{ needs.createVersion.outputs.version }}  # can't be named version: dotnet restore craps out if there's an environment variable named "version"
      registry: ghcr.io
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Publish container
        run: |
          dotnet publish src/BitsAndBobs/BitsAndBobs.csproj \
            -t:PublishContainer \
            -p:ContainerImageTag=${{ env.tag }} \
            -p:ContainerRegistry=${{ env.registry }} \
            -p:ContainerRepository=${{ github.actor }}/bitsandbobs-api \
            --configuration Release \
            --runtime linux-arm64

  packageHelm:
    name: Package Helm chart
    runs-on: ubuntu-latest
    needs: [ createVersion ]
    env:
      prefix: ${{ needs.createVersion.outputs.version }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Helm
        uses: azure/setup-helm@v4.3.0
      - name: Create Helm package
        run: |
          helm package src/Infrastructure/helm/bitsandbobs --app-version ${{ env.prefix }}
          mv bitsandbobs-*.tgz bitsandbobs.tgz
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Sync package to CFN bucket
        run: aws s3 sync . s3://${{ env.CfnBucket }}/${{ env.prefix }}/helm --exclude='*' --include='bitsandbobs.tgz'

  packageCfn:
    name: Package CloudFormation template
    runs-on: ubuntu-latest
    needs: [ createVersion ]
    env:
      prefix: ${{ needs.createVersion.outputs.version }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Package template
        run: |
          aws cloudformation package \
          --template-file src/Infrastructure/cfn/bitsandbobs.yaml \
          --s3-bucket ${{ env.CfnBucket }} \
          --s3-prefix ${{ env.prefix }} \
          --output-template-file bitsandbobs.packaged.yaml \
          --force-upload
      - name: Sync template to CFN bucket
        run: aws s3 sync . s3://${{ env.CfnBucket }}/${{ env.prefix }} --exclude='*' --include='bitsandbobs.packaged.yaml'

  deployCfn:
    name: Deploy CloudFormation template
    runs-on: ubuntu-latest
    needs: [createVersion, packageCfn, packageHelm, deployUI, deployApi ]
    if: ${{ !failure() && !cancelled() }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      eksLoadBalancerArn: ${{ secrets.EKS_LB_ARN }}
      eksLoadBalancerDomainName: ${{ secrets.ELS_LB_DOMAIN_NAME }}
      uiBucket: ${{ vars.S3_BUCKET_APP }}
      version: ${{ format('{0}{1}', inputs.version, needs.createVersion.outputs.version) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployCfnRole }}
          role-session-name: ${{ github.run_id }}
      # This check is to make sure we don't try to use out-of-date EKS LB secrets if the cluster doesn't exist yet
      - name: Check if EKS cluster exists
        if: ${{ inputs.enableEksCluster }}
        id: checkCluster
        run: |
          CLUSTER_EXISTS=$(aws eks describe-cluster --name "EksCluster-${{ inputs.environment }}" >/dev/null 2>&1 && echo "true" || echo "false")
          echo "exists=$(CLUSTER_EXISTS)\n" >> $GITHUB_OUTPUT
      - name: Deploy to CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        env:
            hasCluster: ${{ inputs.enableEksCluster && steps.checkCluster.outputs.exists == 'true' }}
            lbArn: ${{ fromJSON(format('["", "{0}"]', env.eksLoadBalancerArn))[env.hasCluster] }}
            lbDomain: ${{ fromJSON(format('["", "{0}"]', env.eksLoadBalancerDomainName))[env.hasCluster] }}
        with:
          name: 'BitsAndBobs-${{ inputs.environment }}'
          template: 'https://${{ env.CfnBucket }}.s3.${{ env.Region }}.amazonaws.com/${{ env.version }}/bitsandbobs.packaged.yaml'
          parameter-overrides: >-
            Environment=${{ inputs.environment }},
            CreateEksCluster=${{ inputs.enableEksCluster }},
            EksLoadBalancerArn=${{ env.lbArn }},
            EksLoadBalancerDomainName=${{ env.lbDomain }}
          no-fail-on-empty-changeset: '1'
      - name: Sync default document to UI bucket
        run: aws s3 sync src/Infrastructure s3://${{ env.uiBucket }} --exclude='*' --include='index.html'

  tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: [ createVersion, deployCfn]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Tag
        uses: actions/github-script@v7
        with:
          script: |
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ needs.createVersion.outputs.version }}',
                sha: context.sha
              })

  release:
    name: Releases the new or requested version
    runs-on: ubuntu-latest
    needs: [ createVersion, deployCfn ]
    if: ${{ !failure() && !cancelled() }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ format('{0}{1}', inputs.version, needs.createVersion.outputs.version) }}
      kvsArn: ${{ secrets.CF_KVS_ARN }}
    outputs:
      # These outputs should really be encrypted and saved to secrets...
      # For now, save them manually to secrets and re-run the workflow with the same version to finish CF setup
      EksLoadBalancerArn: ${{ steps.get_lb_details.outputs.lb_arn }}
      EksLoadBalancerDomainName: ${{ steps.get_lb_details.outputs.lb_domain_name }}
    steps:
      - name: Configure AWS Credentials
        if: ${{ inputs.enableEksCluster }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployCfnRole }}
          role-session-name: ${{ github.run_id }}
      - name: Install Helm
        if: ${{ inputs.enableEksCluster }}
        uses: azure/setup-helm@v4.3.0
      - name: Install kubectl
        if: ${{ inputs.enableEksCluster }}
        uses: azure/setup-kubectl@v4
      - name: Set kubectl context
        if: ${{ inputs.enableEksCluster }}
        run: aws eks update-kubeconfig --region ${{ env.Region }} --name EksCluster-${{ inputs.environment }}
      - name: Deploy Helm chart
        if: ${{ inputs.enableEksCluster }}
        run: helm upgrade bitsandbobs 'https://${{ env.CfnBucket }}.s3.${{ env.Region }}.amazonaws.com/${{ env.version }}/helm/bitsandbobs.tgz'
      - name: Get load balancer details
        if: ${{ inputs.enableEksCluster }}
        id: get_lb_details
        run: |
          lb_domain_name=$(kubectl get ingress bitsandbobs -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
          lb_arn=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?DNSName=='$lb_domain_name'].LoadBalancerArn" --output text 2>/dev/null)
          echo "lb_arn=$(lb_arn)\n" >> $GITHUB_OUTPUT
          echo "lb_domain_name=$(lb_domain_name)\n" >> $GITHUB_OUTPUT
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployVersionRole }}
          role-session-name: ${{ github.run_id }}
      - name: Set UI version in CloudFront
        run: |
          aws cloudfront-keyvaluestore put-key \
           --kvs-arn=$kvsArn \
           --key=current-version \
           --value=$version \
           --if-match=$(aws cloudfront-keyvaluestore describe-key-value-store --kvs-arn=$kvsArn --query=ETag --output=text)







