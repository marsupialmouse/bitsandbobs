name: Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to which the application will be deployed.
        default: 'Production'
        type: environment
        required: true
      version:
        description: The version (tag) to deploy. Leave blank to build and deploy a new version.
        type: string
        required: false
      enableEksCluster:
        description: Whether the EKS cluster should be enabled ($$)
        type: boolean
        default: false
        required: true

env:
  CfnBucket: ${{ vars.S3_BUCKET_APP }}
  DeployCfnRole: ${{ secrets.AWS_ROLE_DEPLOY_CFN_ARN }}
  DeployAssetsRole: ${{ secrets.AWS_ROLE_DEPLOY_ASSSETS_ARN }}
  DeployVersionRole: ${{ secrets.AWS_ROLE_DEPLOY_VERSION_ARN }}
  Region: ${{ secrets.AWS_DEFAULT_REGION }}
  UiBucket: ${{ vars.S3_BUCKET_APP }}

jobs:
  createVersion:
    name: Create release version
    runs-on: ubuntu-latest
    if: ${{ !startsWith(inputs.version, 'v') }}
    outputs:
      version: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for calculating the latest version
      - name: Increment version
        id: version
        uses: paulhatch/semantic-version@v5.4.0

  deployUI:
    name: Build and publish UI
    runs-on: ubuntu-latest
    needs: createVersion
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ needs.createVersion.outputs.version }}
    defaults:
      run:
        working-directory: 'src/BitsAndBobs/clientapp'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: src/BitsAndBobs/clientapp/yarn.lock
      - name: Install Node.js dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Build
        run: yarn build
      - name: Configure AWS Delivery Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Sync build to UI bucket
        run: aws s3 sync ./dist s3://${{ env.UiBucket }}/${{ env.version }}

  deployApi:
    name: Build and publish API
    runs-on: ubuntu-latest
    needs: [createVersion]
    environment: ${{ inputs.environment }}
    env:
      tag: ${{ needs.createVersion.outputs.version }}  # can't be named version: dotnet restore craps out if there's an environment variable named "version"
      registry: ghcr.io
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Log in to the container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x
      - name: Publish container
        run: |
          dotnet publish src/BitsAndBobs/BitsAndBobs.csproj \
            -t:PublishContainer \
            -p:ContainerImageTag=${{ env.tag }} \
            -p:ContainerRegistry=${{ env.registry }} \
            -p:ContainerRepository=${{ github.actor }}/bitsandbobs-api \
            --configuration Release \
            --runtime linux-arm64

  packageCfn:
    name: Package CloudFormation template
    runs-on: ubuntu-latest
    needs: [ createVersion ]
    env:
      prefix: ${{ needs.createVersion.outputs.version }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Package template
        run: |
          aws cloudformation package \
          --template-file src/Infrastructure/bitsandbobs.yaml \
          --s3-bucket ${{ env.CfnBucket }} \
          --s3-prefix ${{ env.prefix }} \
          --output-template-file bitsandbobs.packaged.yaml \
          --force-upload
      - name: Sync template to CFN bucket
        run: aws s3 sync . s3://${{ env.CfnBucket }}/${{ env.prefix }} --exclude='*' --include='bitsandbobs.packaged.yaml'

  deployCfn:
    name: Deploy CloudFormation template
    runs-on: ubuntu-latest
    needs: [createVersion, packageCfn]
    if: ${{ !failure() && !cancelled() }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ format('{0}{1}', inputs.version, needs.createVersion.outputs.version) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployCfnRole }}
          role-session-name: ${{ github.run_id }}
      - name: Deploy to CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: 'BitsAndBobs-${{ inputs.environment }}'
          template: s3://${{ env.CfnBucket }}/${{ env.version }}/bitsandbobs.packaged.yaml
          parameter-overrides: 'Environment=${{ inputs.environment }},CreateEksCluster=${{ inputs.enableEksCluster }}'
          no-fail-on-empty-changeset: '1'
      - name: Sync default document to UI bucket
        run: aws s3 sync src/Infrastructure s3://${{ env.UiBucket }} --exclude='*' --include='index.html'

  tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: [ createVersion, deployUI, deployApi, deployCfn ]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Tag
        uses: actions/github-script@v7
        with:
          script: |
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ needs.createVersion.outputs.version }}',
                sha: context.sha
              })

  release:
    name: Releases the new or requested version
    runs-on: ubuntu-latest
    needs: [ createVersion, deployUI, deployApi, deployCfn ]
    if: ${{ !failure() && !cancelled() }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ format('{0}{1}', inputs.version, needs.createVersion.outputs.version) }}
      kvsArn: ${{ secrets.CF_KVS_ARN }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployVersionRole }}
          role-session-name: ${{ github.run_id }}
      - name: Set UI version in CloudFront
        run: |
          aws cloudfront-keyvaluestore put-key \
           --kvs-arn=$kvsArn \
           --key=current-version \
           --value=$version \
           --if-match=$(aws cloudfront-keyvaluestore describe-key-value-store --kvs-arn=$kvsArn --query=ETag --output=text)







