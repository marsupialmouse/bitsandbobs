name: Release

on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment to which the application will be deployed.
        default: 'Production'
        type: environment
        required: true
      version:
        description: The version (tag) to deploy. Leave blank to build and deploy a new version.
        type: string
        required: false

env:
  DeployCfnRole: ${{ secrets.AWS_ROLE_DEPLOY_CFN_ARN }}
  DeployAssetsRole: ${{ secrets.AWS_ROLE_DEPLOY_ASSSETS_ARN }}
  DeployVersionRole: ${{ secrets.AWS_ROLE_DEPLOY_VERSION_ARN }}
  Region: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  createVersion:
    name: Create release version
    runs-on: ubuntu-latest
    if: ${{ !startsWith(inputs.version, 'v') }}
    outputs:
      version: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed for calculating the latest version
      - name: Increment version
        id: version
        uses: paulhatch/semantic-version@v5.4.0

  deployUI:
    name: Build UI
    runs-on: ubuntu-latest
    needs: createVersion
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      uiBucket: ${{ vars.S3_BUCKET_APP }}
      version: ${{ needs.createVersion.outputs.version }}
    defaults:
      run:
        working-directory: 'src/BitsAndBobs/clientapp'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'yarn'
          cache-dependency-path: src/BitsAndBobs/clientapp/yarn.lock
      - name: Install Node.js dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Build
        run: yarn build
      - name: Configure AWS Delivery Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Sync build to UI bucket
        run: aws s3 sync ./dist s3://${{ env.uiBucket }}/${{ env.version }}

  deployCfn:
    name: Deploy CloudFormation template
    runs-on: ubuntu-latest
    needs: [deployUI]
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      uiBucket: ${{ vars.S3_BUCKET_APP }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployCfnRole }}
          role-session-name: ${{ github.run_id }}
      - name: Deploy to CloudFormation
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: 'BitsAndBobs-${{ inputs.environment }}'
          template: src/Infrastructure/bitsandbobs.yaml
          parameter-overrides: 'Environment=${{ inputs.environment }}'
          no-fail-on-empty-changeset: '1'
      - name: Configure AWS Delivery Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployAssetsRole }}
          role-session-name: ${{ github.run_id }}
      - name: Sync default document to UI bucket
        run: aws s3 sync src/Infrastructure s3://${{ env.uiBucket }} --exclude='*' --include='index.html'

  tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: [ createVersion, deployCfn ]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Tag
        uses: actions/github-script@v7
        with:
          script: |
              github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/${{ needs.createVersion.outputs.version }}',
                sha: context.sha
              })

  release:
    name: Releases the new or requested version
    runs-on: ubuntu-latest
    needs: [ createVersion, deployCfn ]
    if: ${{ !failure() && !cancelled() }}
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: read
    env:
      version: ${{ format('{0}{1}', inputs.version, needs.createVersion.outputs.version) }}
      kvsArn: ${{ vars.CF_KVS_ARN }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.Region }}
          role-to-assume: ${{ env.DeployVersionRole }}
          role-session-name: ${{ github.run_id }}
      - name: Set UI version in CloudFront
        run: |
          aws cloudfront put-key-value \
           --key-value-store-arn "$kvsArn" \
           --key "current-version" \
           --value "$version" \
           --if-match $(aws cloudfront get-key-value-store --key-value-store-arn "$kvsArn" --query 'ETag' --output text)







